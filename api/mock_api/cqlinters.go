// Code generated by MockGen. DO NOT EDIT.
// Source: api/cqlinters.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	api "github.com/bvobart/mllint/api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCQLinter is a mock of CQLinter interface
type MockCQLinter struct {
	ctrl     *gomock.Controller
	recorder *MockCQLinterMockRecorder
}

// MockCQLinterMockRecorder is the mock recorder for MockCQLinter
type MockCQLinterMockRecorder struct {
	mock *MockCQLinter
}

// NewMockCQLinter creates a new mock instance
func NewMockCQLinter(ctrl *gomock.Controller) *MockCQLinter {
	mock := &MockCQLinter{ctrl: ctrl}
	mock.recorder = &MockCQLinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCQLinter) EXPECT() *MockCQLinterMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockCQLinter) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockCQLinterMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCQLinter)(nil).String))
}

// Type mocks base method
func (m *MockCQLinter) Type() api.CQLinterType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(api.CQLinterType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockCQLinterMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCQLinter)(nil).Type))
}

// DependencyName mocks base method
func (m *MockCQLinter) DependencyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DependencyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DependencyName indicates an expected call of DependencyName
func (mr *MockCQLinterMockRecorder) DependencyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DependencyName", reflect.TypeOf((*MockCQLinter)(nil).DependencyName))
}

// IsConfigured mocks base method
func (m *MockCQLinter) IsConfigured(project api.Project) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConfigured", project)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConfigured indicates an expected call of IsConfigured
func (mr *MockCQLinterMockRecorder) IsConfigured(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConfigured", reflect.TypeOf((*MockCQLinter)(nil).IsConfigured), project)
}

// IsProperlyConfigured mocks base method
func (m *MockCQLinter) IsProperlyConfigured(project api.Project) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProperlyConfigured", project)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProperlyConfigured indicates an expected call of IsProperlyConfigured
func (mr *MockCQLinterMockRecorder) IsProperlyConfigured(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProperlyConfigured", reflect.TypeOf((*MockCQLinter)(nil).IsProperlyConfigured), project)
}

// IsInstalled mocks base method
func (m *MockCQLinter) IsInstalled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstalled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInstalled indicates an expected call of IsInstalled
func (mr *MockCQLinterMockRecorder) IsInstalled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstalled", reflect.TypeOf((*MockCQLinter)(nil).IsInstalled))
}

// Run mocks base method
func (m *MockCQLinter) Run(project api.Project) ([]api.CQLinterResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", project)
	ret0, _ := ret[0].([]api.CQLinterResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockCQLinterMockRecorder) Run(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCQLinter)(nil).Run), project)
}

// MockCQLinterResult is a mock of CQLinterResult interface
type MockCQLinterResult struct {
	ctrl     *gomock.Controller
	recorder *MockCQLinterResultMockRecorder
}

// MockCQLinterResultMockRecorder is the mock recorder for MockCQLinterResult
type MockCQLinterResultMockRecorder struct {
	mock *MockCQLinterResult
}

// NewMockCQLinterResult creates a new mock instance
func NewMockCQLinterResult(ctrl *gomock.Controller) *MockCQLinterResult {
	mock := &MockCQLinterResult{ctrl: ctrl}
	mock.recorder = &MockCQLinterResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCQLinterResult) EXPECT() *MockCQLinterResultMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockCQLinterResult) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockCQLinterResultMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCQLinterResult)(nil).String))
}
